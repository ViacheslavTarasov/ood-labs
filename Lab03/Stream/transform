#!/usr/bin/php
<?php

use Lab03\Stream\CompressFileOutputStream;
use Lab03\Stream\DecompressFileInputStream;
use Lab03\Stream\DecryptFileInputStream;
use Lab03\Stream\EncryptFileOutputStream;
use Lab03\Stream\FileInputStream;
use Lab03\Stream\FileOutputStream;
use Lab03\Stream\Option;

require_once(__DIR__ . '/../../vendor/autoload.php');

system("clear");
echo "\e[4m"; // <underline>
if ($argc < 3) {
    echo "Ошибка параметров \n";
    exit;
}

$outputFilePath = __DIR__ . DIRECTORY_SEPARATOR . array_pop($argv);
$inputFilePath = __DIR__ . DIRECTORY_SEPARATOR . array_pop($argv);

$inputStream = new FileInputStream($inputFilePath);
$outputStream = new FileOutputStream($outputFilePath);

for ($i = 1; $i < $argc - 2;) {
    switch ($argv[$i]) {
        case Option::ENCRYPT:
            $i++;
            $outputStream = new EncryptFileOutputStream($outputStream, getParameterOrException($argv, $i));
            break;
        case Option::DECRYPT:
            $i++;
            $inputStream = new DecryptFileInputStream($inputStream, getParameterOrException($argv, $i));
            break;
        case Option::COMPRESS:
            $i++;
            $outputStream = new CompressFileOutputStream($outputStream);
            break;
        case Option::DECOMPRESS:
            $i++;
            $inputStream = new DecompressFileInputStream($inputStream);
            break;

        default:
            echo "Ошибка параметров \n";
            break;
    }
    $i++;
}

while (!$inputStream->isEof()) {
    $data = $inputStream->readByte();
    $outputStream->writeByte($data);
}

function getParameterOrException(array $argv, int $i)
{
    if (!isset($argv[$i])) {
        throw new RuntimeException('не указан параметр для опции --encrypt' . Option::ENCRYPT);
    }
    return $argv[$i];
}

echo "Выполнено\n";